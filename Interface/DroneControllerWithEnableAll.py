{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enable All is clicked\n",
      "Face recognition is enable\n",
      "Tasya Aulia is clicked\n",
      "Locked face: Tasya Aulia\n",
      "Cristian Agusta is clicked\n",
      "Locked face: Cristian Agusta\n",
      "Cleaning up resources...\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import face_recognition\n",
    "from tkinter import Tk, Label, Button, Frame, StringVar, OptionMenu\n",
    "from PIL import Image, ImageTk\n",
    "\n",
    "class FaceRecognition:\n",
    "    def __init__(self, faces_dir):\n",
    "        self.faces_dir = faces_dir\n",
    "        self.known_face_encodings, self.known_face_names = self.load_known_faces()\n",
    "        self.locked_face_name = None\n",
    "        self.FOCAL_LENGTH = 800\n",
    "        self.KNOWN_FACE_WIDTH = 16  # Rata-rata lebar wajah manusia dalam cm\n",
    "\n",
    "    def load_known_faces(self):\n",
    "        known_face_encodings = []\n",
    "        known_face_names = []\n",
    "        for file_name in os.listdir(self.faces_dir):\n",
    "            if file_name.endswith((\".jpg\", \".png\")):\n",
    "                image_path = os.path.join(self.faces_dir, file_name)\n",
    "                image = face_recognition.load_image_file(image_path)\n",
    "                face_encodings = face_recognition.face_encodings(image)\n",
    "                if face_encodings:\n",
    "                    known_face_encodings.append(face_encodings[0])\n",
    "                    known_face_names.append(os.path.splitext(file_name)[0])\n",
    "        return known_face_encodings, known_face_names\n",
    "\n",
    "    @staticmethod\n",
    "    def calculate_confidence(face_distance, face_match_threshold=0.7):\n",
    "        if face_distance > face_match_threshold:\n",
    "            linear_val = (1.0 - face_distance) / (0.1 - face_match_threshold)\n",
    "            return max(0.0, min(1.0, linear_val)) * 100\n",
    "        else:\n",
    "            linear_val = (1.0 - face_distance) / (face_match_threshold - 0.1)\n",
    "            return max(0.0, min(1.0, linear_val)) * 100\n",
    "\n",
    "    def calculate_distance(self, face_width_pixels):\n",
    "        if face_width_pixels == 0:\n",
    "            return 0.0\n",
    "        return (self.KNOWN_FACE_WIDTH * self.FOCAL_LENGTH) / face_width_pixels\n",
    "\n",
    "    def recognize_faces(self, frame):\n",
    "        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)\n",
    "        rgb_small_frame = small_frame[:, :, ::-1]\n",
    "        face_locations = face_recognition.face_locations(rgb_small_frame)\n",
    "        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)\n",
    "\n",
    "        face_names = []\n",
    "        face_confidences = []\n",
    "        face_distances = []\n",
    "\n",
    "        for face_encoding in face_encodings:\n",
    "            matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)\n",
    "            name = \"Unknown\"\n",
    "            confidence = 0.0\n",
    "            distance = 0.0\n",
    "\n",
    "            face_distances_current = face_recognition.face_distance(self.known_face_encodings, face_encoding)\n",
    "            best_match_index = np.argmin(face_distances_current)\n",
    "            if matches[best_match_index]:\n",
    "                confidence = self.calculate_confidence(face_distances_current[best_match_index])\n",
    "                if confidence > 95:\n",
    "                    name = self.known_face_names[best_match_index]\n",
    "\n",
    "            face_names.append(name)\n",
    "            face_confidences.append(confidence)\n",
    "            face_distances.append(distance)\n",
    "\n",
    "        return face_locations, face_names, face_confidences, face_distances\n",
    "\n",
    "    def lock_face(self, name):\n",
    "        if name in self.known_face_names:\n",
    "            self.locked_face_name = name\n",
    "            print(f\"Locked face: {self.locked_face_name}\")\n",
    "        else:\n",
    "            self.locked_face_name = None\n",
    "            print(\"Face recognition is enable\")\n",
    "\n",
    "    def display_results(self, frame, face_locations, face_names, face_confidences, face_distances):\n",
    "        for (top, right, bottom, left), name, confidence, distance in zip(face_locations, face_names, face_confidences, face_distances):\n",
    "            if self.locked_face_name is None or name == self.locked_face_name:\n",
    "                top *= 4\n",
    "                right *= 4\n",
    "                bottom *= 4\n",
    "                left *= 4\n",
    "\n",
    "                face_width_pixels = right - left\n",
    "                distance = self.calculate_distance(face_width_pixels)\n",
    "\n",
    "                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)\n",
    "                label = f\"{name} ({confidence:.2f}%) Distance: {distance:.2f} cm\"\n",
    "                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)\n",
    "                font = cv2.FONT_HERSHEY_DUPLEX\n",
    "                fontScale = 0.5 \n",
    "                cv2.putText(frame, label, (left + 6, bottom - 6), font, fontScale, (255, 255, 255), 1)\n",
    "\n",
    "        return frame\n",
    "\n",
    "class WebcamController:\n",
    "    def __init__(self, face_recognition_system):\n",
    "        self.root = Tk()\n",
    "        self.root.title(\"Webcam Controller - Tkinter\")\n",
    "        self.root.minsize(800, 600)\n",
    "\n",
    "        self.face_recognition_system = face_recognition_system\n",
    "        self.cap = cv2.VideoCapture(0)\n",
    "\n",
    "        self.input_frame = Frame(self.root)\n",
    "        self.cap_lbl = Label(self.root)\n",
    "        self.button_frame = Frame(self.root)\n",
    "\n",
    "        self.demo_button = Button(self.button_frame, text=\"Demo Button\", command=self.demo_function)\n",
    "        self.demo_button.pack(side='left', padx=10)\n",
    "\n",
    "        self.face_detection_var = StringVar(self.root)\n",
    "        self.face_detection_var.set(\"Disable\")\n",
    "        self.face_detection_menu = OptionMenu(self.button_frame, self.face_detection_var, \"Disable\", \"Enable All\", *self.face_recognition_system.known_face_names, command=self.on_dropdown_select)\n",
    "        self.face_detection_menu.pack(side='left')\n",
    "\n",
    "        self.button_frame.pack(anchor=\"center\", pady=10)\n",
    "\n",
    "    def demo_function(self):\n",
    "        print(\"Demo Button clicked!\")\n",
    "\n",
    "    def on_dropdown_select(self, selection):\n",
    "        print(f\"{selection} is clicked\")\n",
    "        if selection == \"Disable\":\n",
    "            self.face_recognition_system.lock_face(None)\n",
    "        elif selection == \"Enable All\":\n",
    "            self.face_recognition_system.lock_face(None)\n",
    "        else:\n",
    "            self.face_recognition_system.lock_face(selection)\n",
    "\n",
    "    def run_app(self):\n",
    "        try:\n",
    "            self.input_frame.pack()\n",
    "            self.input_frame.focus_set()\n",
    "            self.cap_lbl.pack(anchor=\"center\", pady=15)\n",
    "            self.video_stream()\n",
    "            self.button_frame.pack(anchor=\"s\", pady=10) \n",
    "            self.root.mainloop()\n",
    "        except Exception as e:\n",
    "            print(f\"Error running the application: {e}\")\n",
    "        finally:\n",
    "            self.cleanup()\n",
    "\n",
    "    def video_stream(self):\n",
    "        h, w = 480, 720\n",
    "        ret, frame = self.cap.read()\n",
    "\n",
    "        if ret:\n",
    "            frame = cv2.resize(frame, (w, h))\n",
    "            face_locations, face_names, face_confidences, face_distances = [], [], [], []\n",
    "\n",
    "            if self.face_detection_var.get() != \"Disable\":\n",
    "                face_locations, face_names, face_confidences, face_distances = self.face_recognition_system.recognize_faces(frame)\n",
    "\n",
    "            frame = self.face_recognition_system.display_results(frame, face_locations, face_names, face_confidences, face_distances)\n",
    "\n",
    "            img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA))\n",
    "            imgtk = ImageTk.PhotoImage(image=img)\n",
    "            self.cap_lbl.imgtk = imgtk\n",
    "            self.cap_lbl.configure(image=imgtk)\n",
    "\n",
    "        self.cap_lbl.after(10, self.video_stream)\n",
    "\n",
    "    def cleanup(self):\n",
    "        try:\n",
    "            print(\"Cleaning up resources...\")\n",
    "            self.cap.release()\n",
    "            self.root.quit()\n",
    "        except Exception as e:\n",
    "            print(f\"Error performing cleanup: {e}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    faces_dir = \"faces\"\n",
    "    face_recognition_system = FaceRecognition(faces_dir)\n",
    "    gui = WebcamController(face_recognition_system)\n",
    "    gui.run_app()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "object_det",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
